using System;

// Singleton
public sealed class Logger
{
    private static readonly Lazy<Logger> lazy = new Lazy<Logger>(() => new Logger());

    public static Logger Instance
    {
        get
        {
            return lazy.Value;
        }
    }

    private Logger()
    {
        // Private constructor to prevent instantiation
    }

    public void Log(string message)
    {
        Console.WriteLine($"Log: {message}");
    }
}

// Client
public class Program
{
    public static void Main(string[] args)
    {
        Logger logger1 = Logger.Instance;
        logger1.Log("First message");

        Logger logger2 = Logger.Instance;
        logger2.Log("Second message");

        // Checking if both logger instances are the same
        if (logger1 == logger2)
        {
            Console.WriteLine("Logger has a single instance.");
        }
        else
        {
            Console.WriteLine("Logger instances are different.");
        }
    }
}
